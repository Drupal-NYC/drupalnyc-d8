<?php

/**
 * @file
 * Primary module hooks for DrupalNYC JSON-LD module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\dnyc_jsonld\Data\EventStatusType;
use Drupal\node\NodeInterface;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\schemadotorg\SchemaDotOrgMappingInterface;

/**
 * Implements HOOK_schemadotorg_jsonld_alter for drupal_jsonld.
 */
function dnyc_jsonld_schemadotorg_jsonld_schema_type_entity_alter(array &$data, EntityInterface $entity, ?SchemaDotOrgMappingInterface $mapping, BubbleableMetadata $bubbleable_metadata): void {
  if (!($entity instanceof NodeInterface) || !($mapping instanceof SchemaDotOrgMappingInterface)) {
    return;
  }
  $schema_type = $mapping->getSchemaType();
  if ($schema_type !== 'Event') {
    return;
  }
  /** @var \Drupal\smart_date_recur\SmartDateRecurManager $recurring_manager */
  $recurring_manager = \Drupal::service('smart_date_recur.manager');
  if ($entity->hasField('schema_event_schedule')) {
    /** @var \Drupal\smart_date\Plugin\Field\FieldType\SmartDateFieldItemList $schedule */
    $schedule = $entity->get('schema_event_schedule');
    if ($schedule->isEmpty()) {
      return;
    }
    $instances = [];
    foreach ($schedule as $date) {
      $instances[$date->value] = $date;
    }
    ksort($instances);
    $instances = array_values($instances);
    $next_delta = $recurring_manager->findNextInstance($instances);
    /** @var \Drupal\smart_date\Plugin\Field\FieldType\SmartDateItem $next */
    $next = $schedule->get($next_delta);
    $data['startDate'] = date('c', $next->value);
  }
  if (isset($data['eventStatus'])) {
    $status = EventStatusType::tryFrom($data['eventStatus']);
    if ($status instanceof EventStatusType) {
      $data['eventStatus'] = $status->url();
      if (isset($data['previousStartDate'])
        && !($status === EventStatusType::EventPostponed || $status === EventStatusType::EventRescheduled)) {
        // Google only allows previousStartDate with these statuses.
        unset($data['previousStartDate']);
      }
    }
  }
  if (isset($data['location'])) {
    $name = $data['location']['name'] ?? NULL;
    unset($data['location']['name']);
    $address_location = $data['location'];
    $data['location'] = [
      '@type' => 'Place',
      'address' => $address_location,
    ];
    if (!empty($name)) {
      $data['location']['name'] = $name;
    }
  }
  elseif ($entity->hasField('field_online_event')
    && !$entity->get('field_online_event')->isEmpty()
    && $entity->get('field_online_event')->first()->value) {
    $data['location'] = [
      '@type' => 'VirtualLocation',
      'url' => $data['@url'] ?? 'https://www.drupalnyc.org',
    ];
    $data['eventAttendanceMode'] = ["https://schema.org/OnlineEventAttendanceMode"];
  }
}
