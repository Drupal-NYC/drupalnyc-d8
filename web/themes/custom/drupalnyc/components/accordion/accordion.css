.c-accordion {
  position: relative;
  display: flex;
  flex-direction: column;
  padding: 0;
}
.c-accordion .c-accordion__title {
  font-size: var(--dnyc-fs-body-base);
  line-height: var(--dnyc-lh-body-base);
  font-weight: var(--dnyc-fw-regular);
}
.c-accordion .c-accordion__button {
  align-items: center;
  border: none;
  background: none;
  border-radius: 0;
  cursor: pointer;
  display: flex;
  gap: 0.5rem;
  justify-content: flex-start;
  margin: 0;
  padding: 0;
  position: relative;
}
.c-accordion .c-accordion__button .c-accordion__button-icon,
.c-accordion .c-accordion__button .c-accordion__button-icon span {
  display: flex;
  height: 1.5rem;
  width: 1.5rem;
}
.c-accordion .c-accordion__button .c-accordion__button-icon span {
  position: absolute;
  left: 0;
}
.c-accordion .c-accordion__button .c-accordion__button-icon span svg {
  transition: transform 350ms cubic-bezier(0.4, 0, 0.2, 1), opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);
}
.c-accordion .c-accordion__button .c-accordion__button-icon span .expand {
  opacity: 1;
}
.c-accordion .c-accordion__button .c-accordion__button-icon span .collapse {
  opacity: 0;
}
.c-accordion .c-accordion__button[aria-expanded=true] .c-accordion__button-icon .expand {
  opacity: 0;
  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1), opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);
}
.c-accordion .c-accordion__button[aria-expanded=true] .c-accordion__button-icon .collapse {
  opacity: 1;
  transition: transform 350ms cubic-bezier(0.4, 0, 0.2, 1), opacity 350ms cubic-bezier(0.4, 0, 0.2, 1);
}
.c-accordion .c-accordion__content {
  height: -moz-fit-content;
  height: fit-content;
  transition: max-height 850ms cubic-bezier(0.4, 0, 0.2, 1);
}
.c-accordion .c-accordion__content .c-accordion__content-inner-wrapper {
  opacity: 1;
  transition: opacity 750ms cubic-bezier(0.4, 0, 0.2, 1);
  margin: 0.75rem 0 0 0;
}
@media (min-width: 768px) {
  .c-accordion .c-accordion__content .c-accordion__content-inner-wrapper {
    margin: 1.25rem 0 0 0;
  }
}
.c-accordion .c-accordion__content[aria-hidden=true] {
  height: 0;
  overflow: hidden;
  transition: max-height 650ms cubic-bezier(0.4, 0, 0.2, 1);
}
.c-accordion .c-accordion__content[aria-hidden=true] .c-accordion__content-inner-wrapper {
  opacity: 0;
  transition: opacity 550ms cubic-bezier(0.4, 0, 0.2, 1);
}/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */
