.c-link {
  font-size: var(--dnyc-fs-body-18);
  line-height: var(--dnyc-lh-body-18);
  align-items: center;
  display: flex;
  gap: 10px;
  -webkit-text-decoration: none;
  text-decoration: none;
  width: -moz-fit-content;
  width: fit-content;
}
.c-link:hover {
  cursor: pointer;
  -webkit-text-decoration: underline;
  text-decoration: underline;
}

.c-link__icon {
  display: inline-flex;
  height: 1rem;
  width: 1rem;
}
.c-link__icon svg {
  fill: var(--dnyc-color-black);
}/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */
