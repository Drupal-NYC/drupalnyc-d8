@font-face {
  font-family: "League Spartan Variable";
  src: url("/themes/custom/drupalnyc/fonts/LeagueSpartan/variable/WOFF2/LeagueSpartan-VF.woff2") format("woff2-variations");
  font-weight: 200 900;
}
/**** START - Main tansparency, menu wrappers & placement ****/
main::before {
  display: none;
}

@media (max-width: 767.98px) {
  .js-prevent-scroll {
    position: fixed;
    height: 100%;
    overflow: hidden;
    width: 100%;
  }
  .js-prevent-scroll main::before {
    display: block;
    content: "";
    background: rgba(0, 0, 0, 0.3);
    transition: all 0.25s ease-in-out;
    position: fixed; /* Sit on top of the page content */
    width: 100%; /* Full width (cover the whole page) */
    height: 100%; /* Full height (cover the whole page) */
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 2;
  }
}
@media (max-width: 767.98px) {
  .js-prevent-scroll main::before {
    top: 95px;
  }
  .js-prevent-scroll.user-logged-in main::before {
    padding-top: 40px;
    top: 140px;
  }
}

.site-header {
  background-color: #fff;
  position: relative;
  z-index: 3;
}

.site-header__inner {
  align-items: center;
  display: flex;
  flex-direction: row;
  flex-wrap: nowrap;
  justify-content: space-between;
}

/**** END - Main tansparency, menu wrappers & placement ****/
/**** START - Main Navigation ****/
.site-header__navigation {
  position: fixed;
}
@media (max-width: 767.98px) {
  .site-header__navigation {
    background-color: #fff;
    top: 95px;
    bottom: 0;
    right: 0;
    z-index: -1;
    opacity: 0;
    transform: translateY(-100%);
    transition: all 0.5s ease-in-out;
    width: 100%;
    max-width: 375px;
  }
  .user-logged-in .site-header__navigation {
    top: 135px;
  }
}
@media (min-width: 768px) {
  .site-header__navigation {
    align-items: flex-end;
    display: flex;
    justify-content: flex-end;
    flex-flow: column-reverse;
    position: relative;
  }
}

/**** END - Main Navigation ****/
/**** START - Utility Navigation ****/
.site-header__utilities {
  margin-bottom: 20px;
}

/**** END - Utility Navigation ****/
/**** START - Mobile Navigation Button ****/
.nav-trigger {
  display: none;
}
@media (max-width: 767.98px) {
  .nav-trigger {
    grid-column-start: 2;
    align-items: center;
    background: transparent;
    border: none;
    display: inline-flex;
    height: 36px;
    margin-top: auto;
    margin-left: auto;
    margin-bottom: auto;
    max-width: 100px;
    padding: 0;
  }
}

label[for=nav-trigger] {
  cursor: pointer;
  height: 30px;
  margin: auto;
  position: absolute;
  right: 30px;
  top: 18px;
  width: 30px;
  z-index: 2;
}
@media (min-width: 768px) {
  label[for=nav-trigger] {
    display: none;
  }
}

.nav-trigger span.icon {
  width: 1.5rem;
  height: 1.5rem;
  display: inline-block;
  position: relative;
}
.nav-trigger span.icon svg {
  position: absolute;
  left: 0;
  top: 0;
}

.nav-trigger__icon--expand {
  opacity: 1;
  transform: rotate(0) scale(1);
  transition: all 0.35s ease-in-out;
}

.nav-trigger__icon--collapse {
  opacity: 0;
  transform: rotate(-90deg) scale(0);
  transition: all 0.35s ease-in-out;
}

.nav-trigger[aria-expanded=true] .nav-trigger__icon--collapse {
  opacity: 1;
  transform: rotate(0) scale(1);
}
.nav-trigger[aria-expanded=true] .nav-trigger__icon--expand {
  opacity: 0;
  transform: rotate(90deg) scale(0);
}

@media (max-width: 767.98px) {
  .nav-trigger[aria-expanded=false] ~ .site-header__navigation {
    opacity: 0;
    visibility: hidden;
    transform: translate3d(375px, 0, 0);
  }
  .nav-trigger[aria-expanded=true] ~ .site-header__navigation {
    opacity: 1;
    visibility: visible;
    overflow-y: auto;
    transform: translate3d(0, 0, 0);
    z-index: 3;
  }
}
/**** END - Mobile Navigation Button ****//*# sourceMappingURL=data:application/json;charset=utf-8;base64, */
