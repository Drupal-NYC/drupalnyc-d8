//
// Settings - Spacing
//
// - 01 - Imports
// - 02 - Spacing Scale
// - 03 - Custom Properties
// - 04 - Utility Classes

//------------------------------------
//  01 - Imports
//------------------------------------

@use '../../partials/calculations' as functions-calculations;
@use '../../partials/breakpoints' as mixins-breakpoints;
@use '../../partials/spacing' as mixins-spacing;

//------------------------------------
//  02 - Spacing Scale
//  The scale is organized into groups of CSS length values.
//  Each key represents the target `px` value at the largest
//  breakpoint. Within each, a target `px` values are set per breakpoint.
//
//  The example below shows a `0` value which will be set to 0 and not adjust based on breakpoints.
//  The `10` value will be default to 4px and will scale up to 8px at the tablet breakpoint and 10px on desktop.
//  Example:
//  0: (
//    mobile: 0,
//  ),
//  10: (
//    mobile: 4,
//    tablet: 8,
//    sm-desktop: 10,
//  ),
//  20: (
//    mobile: 8,
//    tablet: 12,
//    sm-desktop: 16,
//    desktop: 20,
//  ),
//  36: (
//    mobile: 12,
//    tablet: 18,
//    sm-desktop: 24,
//    desktop: 36,
//  ),
//
//  Note: The breakpoints listed here must correspond with breakpoints defined in
//  `libraries/partials/settings/breakpoints.scss`.
//
//  $spacing-scale: (
//    size1: (
//      breakpoint1: pixelValue,
//      breakpoint2: pixelValue,
//      ...
//    ),
//    size2: ( ... ),
//      ...
//    ),
//  );
//
//------------------------------------

/* prettier-ignore */
$spacing-scale: (
  0: (
    mobile: 0,
  ),
  8: (
    mobile: 4,
    tablet: 8,
  ),
  20: (
    mobile: 8,
    tablet: 12,
    sm-desktop: 16,
    desktop: 20,
  ),
  36: (
    mobile: 12,
    tablet: 18,
    sm-desktop: 24,
    desktop: 36,
  ),
  60: (
    mobile: 20,
    tablet: 32,
    sm-desktop: 40,
    desktop: 60,
  ),
  96: (
    mobile: 30,
    tablet: 48,
    sm-desktop: 60,
    desktop: 96,
  ),
  120: (
    mobile: 40,
    tablet: 60,
    sm-desktop: 80,
    desktop: 120,
  ),
  180: (
    mobile: 60,
    tablet: 90,
    sm-desktop: 120,
    desktop: 180,
  ),
);

//------------------------------------
//  02 - Custom Properties
//  Generate custom properties for each value in the spacing scale
//  across each breakpoint.
//
//  Example output:
//
//  :root {
//    --dnyc-space-0: 0px;
//    --dnyc-space-8: 4px;
//    --dnyc-space-20: 8px;
//    ...
//    --dnyc-space-rem-10: 0.25rem;
//    --dnyc-space-rem-20: 0.5rem;
//  }
//  @media (min-width: 768px) {
//    :root {
//      --dnyc-space-8: 8px;
//      --dnyc-space-20: 12px;
//      ...
//      --dnyc-space-rem-8: 0.5rem;
//      --dnyc-space-rem-20: 0.75rem;
//    }
//  }
//  ...
//------------------------------------
@mixin spacing-scale() {
  @include mixins-spacing.spacing-scale-custom-props($spacing-scale);
}

@include spacing-scale();

//------------------------------------
//  03 - Utility Classes
//  Generate sets of space related utility classes.
//  These classes can be used to apply padding, margin, and gap to elements.
//  They are most useful when used in conjunction with Mercury Editor and
//  corresponding Style Options.
//
//  By default, these classes are disabled. To enable them, uncomment the
//  relevant include statement below.
//------------------------------------

// Gap utility classes
//
// Example output:
// .u-gap-0 {
//   gap: var(--dnyc-space-0);
// }
// .u-gap-8 {
//   gap: var(--dnyc-space-8);
// }
// .u-column-gap-0 {
//   column-gap: var(--dnyc-space-0);
// }
// .u-column-gap-8 {
//   column-gap: var(--dnyc-space-8);
// }
// .u-row-gap-0 {
//   row-gap: var(--dnyc-space-0);
// }
// .u-row-gap-8 {
//   row-gap: var(--dnyc-space-8);
// }

// @include mixins-spacing.gap-utility-classes($spacing-scale);

// Padding utility classes
//
// Example output:
// .u-p-0 {
//   padding: var(--dnyc-space-0);
// }
// .u-p-8 {
//   padding: var(--dnyc-space-8);
// }
// ...
//
// .u-pt-0 {
//   padding-top: var(--dnyc-space-0);
// }
// .u-pt-8 {
//   padding-top: var(--dnyc-space-8);
// }
// ...

@include mixins-spacing.padding-utility-classes($spacing-scale);

// Margin utility classes
//
// Example output:
// .u-m-0 {
//   margin: var(--dnyc-space-0);
// }
// .u-m-8 {
//   margin: var(--dnyc-space-8);
// }
// ...
//
// .u-mt-0 {
//   margin-top: var(--dnyc-space-0);
// }
// .u-mt-8 {
//   margin-top: var(--dnyc-space-8);
// }
// ...

@include mixins-spacing.margin-utility-classes($spacing-scale);
