<?php

/**
 * @file
 * Functions to support theming.
 */

use Drupal\block_content\BlockContentInterface;
use Drupal\Component\Utility\Html;
use Drupal\node\Entity\Node;

/**
 * Implements hook_preprocess_page() for drupalnyc theme.
 *
 * @param array &$variables
 *   An associative array containing the variables for the page template.
 *
 *   NOTE: If you want to use this outside the footer, you need to
 *   rename this function to drupalnyc_preprocess_page and adjust the
 *   region--footer.html.twig file and add the backToTop variable to the
 *   page.html.twig file.
 */
function drupalnyc_preprocess_region__footer(array &$variables) {

  if (theme_get_setting('display_back_to_top')) {
    $variables['backToTop'] = [
      '#type' => 'component',
      '#component' => 'drupalnyc:back-to-top',
      '#props' => [
        'text' => t('Back to Top'),
      ],
    ];
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function drupalnyc_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  $content = $variables['elements']['content'];

  if (isset($content['#block_content']) && $content['#block_content'] instanceof BlockContentInterface) {
    $suggestions[] = 'block__block_content__' . $content['#block_content']->bundle();
  }
}

/**
 * Implements theme_theme_suggestions_input_alter().
 */
function drupalnyc_theme_suggestions_input_alter(&$suggestions, array $variables) {
  $element = $variables['element'];

  // Add Twig template suggestion based on data attributes. To use this, in a
  // `hook_form_alter()` add an element to the `#attributes` array for
  // `data-twig-suggestion`. `button` elements have a template already made.
  if (isset($element['#attributes']['data-twig-suggestion'])) {
    $suggestions[] = "input__{$element['#type']}__{$element['#attributes']['data-twig-suggestion']}";
  }
}

/**
 * Implements hook_preprocess_form_element().
 */
function drupalnyc_preprocess_form_element(&$variables) {
  if (in_array($variables['element']['#type'] ?? FALSE, ['checkbox', 'radio'], TRUE)) {
    $variables['attributes']['class'][] = 'form-type-boolean';
  }

  if (!empty($variables['description']['attributes'])) {
    $variables['description']['attributes']->addClass('form-item__description');
  }

  if ($variables['disabled']) {
    $variables['label']['#attributes']['class'][] = 'is-disabled';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function drupalnyc_preprocess_form_element_label(&$variables) {
  $variables['attributes']['class'][] = 'form-item__label';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function drupalnyc_preprocess_input(&$variables) {
  if (
    !empty($variables['element']['#title_display']) &&
    $variables['element']['#title_display'] === 'attribute' &&
    !empty((string) $variables['element']['#title'])
  ) {
    $variables['attributes']['title'] = (string) $variables['element']['#title'];
  }

  $type_api = $variables['element']['#type'];
  $type_html = $variables['attributes']['type'];
  $text_types_html = [
    'text',
    'email',
    'tel',
    'number',
    'search',
    'password',
    'date',
    'time',
    'file',
    'color',
    'datetime-local',
    'url',
    'month',
    'week',
  ];

  if (in_array($type_html, $text_types_html, TRUE)) {
    $variables['attributes']['class'][] = 'form-element';
    $variables['attributes']['class'][] = Html::getClass('form-element--type-' . $type_html);
    $variables['attributes']['class'][] = Html::getClass('form-element--api-' . $type_api);

    if (!empty($variables['element']['#autocomplete_route_name'])) {
      $variables['autocomplete_message'] = t('Loadingâ€¦');
    }
  }

  if (in_array($type_html, ['checkbox', 'radio'], TRUE)) {
    $variables['attributes']['class'][] = 'form-boolean';
    $variables['attributes']['class'][] = Html::getClass('form-boolean--type-' . $type_html);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function drupalnyc_preprocess_textarea(&$variables) {
  $variables['attributes']['class'][] = 'form-element';
  $variables['attributes']['class'][] = 'form-element--type-textarea';
  $variables['attributes']['class'][] = 'form-element--api-textarea';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function drupalnyc_preprocess_select(&$variables) {
  $variables['attributes']['class'][] = 'form-element';
  $variables['attributes']['class'][] = $variables['element']['#multiple'] ?
    'form-element--type-select-multiple' :
    'form-element--type-select';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function drupalnyc_preprocess_checkboxes(&$variables) {
  $variables['attributes']['class'][] = 'form-boolean-group';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function drupalnyc_preprocess_radios(&$variables) {
  $variables['attributes']['class'][] = 'form-boolean-group';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function drupalnyc_preprocess_field(&$variables) {
  $rich_field_types = ['text_with_summary', 'text', 'text_long'];

  if (in_array($variables['field_type'], $rich_field_types, TRUE)) {
    $variables['attributes']['class'][] = 'text-content';
  }
}

/**
 * Implements hook_preprocess_menu().
 */
function drupalnyc_preprocess_menu(&$variables) {
  $menu_name = $variables['menu_name'];
  $attributes = &$variables['attributes'];

  // Add base classes to our menu.
  $attributes['class'][] = 'menu';
  $attributes['class'][] = "menu--{$menu_name}";

  drupalnyc_prepare_menu_items($variables['items']);
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function drupalnyc_theme_suggestions_taxonomy_term_alter(array &$suggestions, array $variables) {
  $view_mode = $variables['elements']['#view_mode'];
  $suggestions[] = 'taxonomy_term__' . $view_mode;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * @todo remove after these are resolved:
 * https://www.drupal.org/project/drupal/issues/2270883
 * https://www.drupal.org/project/drupal/issues/2766379
 */
function drupalnyc_theme_suggestions_user_alter(array &$suggestions, array $variables) {
  $view_mode = $variables['elements']['#view_mode'] ?? '';
  if ($view_mode) {
    $suggestions[] = 'user__' . $view_mode;
  }
}

/**
 * Helper function to standarize gaps in the menu markup.
 *
 * @param array $items
 *   The array of menu items.
 */
function drupalnyc_prepare_menu_items(&$items) {
  foreach ($items as &$item) {
    // Set classes on our links.
    $link_attributes = $item['url']->getOption('attributes') ?? [];
    if (isset($link_attributes['class']) && is_string($link_attributes['class'])) {
      $link_attributes['class'] = explode(' ', $link_attributes['class']);
    }
    $link_attributes['class'][] = 'menu__link';

    // Add the data-plugin-id attribute based on the menu link's plugin ID.
    // This is utilized in the menu components.
    if (isset($item['original_link'])) {
      $link_attributes['data-plugin-id'] = $item['original_link']->getPluginId();
    }

    $item['url']->setOption('attributes', $link_attributes);

    // Set classes for the link wrapper.
    $item_classes = ['menu__item'];

    if ($item['is_expanded'] ?? FALSE) {
      $item_classes[] = 'menu__item--expanded';
    }

    if ($item['is_collapsed'] ?? FALSE) {
      $item_classes[] = 'menu__item--collapsed';
    }

    if ($item['in_active_trail'] ?? FALSE) {
      $item_classes[] = 'menu__item--active-trail';
    }

    $item['attributes']->addClass($item_classes);

    if (!empty($item['below'])) {
      drupalnyc_prepare_menu_items($item['below']);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for breadcrum.
 *
 * This preprocess adds the current page title to the end of a breadcrumb list.
 *
 * @param array &$variables
 *   An associative array containing the variables for the page template.
 */
function drupalnyc_preprocess_breadcrumb(&$variables) {
  if ($variables['breadcrumb']) {
    $request = \Drupal::request();
    $route_match = \Drupal::routeMatch();
    $page_title = \Drupal::service('title_resolver')->getTitle($request, $route_match->getRouteObject());

    if (!empty($page_title)) {
      $breadcrumb_link = [
        'text' => $page_title,
        'url' => '',
        'attributes' => ['class' => 'active'],
        'is_current' => TRUE,
      ];

      // Add cache metadata.
      $breadcrumb_link['#cache'] = [
        'contexts' => ['url.path'],
        'tags' => ['config:system.site'],
      ];

      $variables['breadcrumb'][] = $breadcrumb_link;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for node.
 */
function drupalnyc_preprocess_node(&$variables) {
  $view_mode = $variables['elements']['#view_mode'] ?? '';
  $node = $variables['node'];
  if (
    $view_mode === 'teaser'
    && $node instanceof Node
    && $node->get('schema_image')->isEmpty()
  ) {
    $variables['attributes']['class'][] = 'no-image';
  }
}
