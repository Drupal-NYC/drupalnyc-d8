name: "Pull and build Composer and Yarn dependencies"
description: "Pulls down Composer and Yarn dependencies with caching and builds the theme with Yarn."
inputs:
  drupalnyc-domains-key:
    required: true
    description: The ssh key for pushing to Pantheon
  remote-host-key:
    required: true
    description: The server host key for the remote git repository.
  composer-options:
    required: false
    description: Flags added after `composer install`. Pass `--no-dev` to build composer without the "require-dev" dependencies.
    default: ''
  yarn-build:
    required: false
    description: Should a yarn build process run?
    default: 'true'
runs:
  using: composite
  steps:
    - name: Setup SSH Keys
      shell: bash
      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      run: |
        ssh-agent -a $SSH_AUTH_SOCK > /dev/null
        ssh-add - <<< "${{ inputs.drupalnyc-domains-key }}"
        if [ ! -d "~/.ssh" ]; then mkdir ~/.ssh; fi
        echo "${{ inputs.remote-host-key }}" >> ~/.ssh/known_hosts
        echo "StrictHostKeyChecking accept-new" >> ~/.ssh/config

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        coverage: none

    - name: Get composer cache directory
      id: composer-cache
      shell: bash
      run: echo "composer-dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

    - name: Restore composer cache
      uses: actions/cache@v3
      with:
        path: ${{ steps.composer-cache.outputs.composer-dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-

    - name: Install dependencies
      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      shell: bash
      run: composer install ${{ inputs.composer-options }}

    - name: Setup Node via NVM
      if: inputs.yarn-build == 'true'
      id: nvm-yarn
      shell: bash -l {0}
      run: |
        nvm install
        npm install --global yarn
        echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

    - name: Restore Yarn cache
      if: inputs.yarn-build == 'true'
      uses: actions/cache@v3
      with:
        path: ${{ steps.nvm-yarn.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: Yarn install and build
      if: inputs.yarn-build == 'true'
      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      shell: bash -l {0}
      run: |
        nvm use
        yarn install --frozen-lockfile
        yarn build
